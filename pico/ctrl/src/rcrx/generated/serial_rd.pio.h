// -------------------------------------------------- //
// This file is autogenerated by pioasm; do not edit! //
// -------------------------------------------------- //

#pragma once

#if !PICO_NO_HARDWARE
#include "hardware/pio.h"
#endif

// -------------- //
// serial_rd_norm //
// -------------- //

#define serial_rd_norm_wrap_target 6
#define serial_rd_norm_wrap 6
#define serial_rd_norm_pio_version 1

#define serial_rd_norm_offset_start 0u

static const uint16_t serial_rd_norm_program_instructions[] = {
    0xe028, //  0: set    x, 8
    0x20a0, //  1: wait   1 pin, 0
    0x00c4, //  2: jmp    pin, 4
    0x0000, //  3: jmp    0
    0x0042, //  4: jmp    x--, 2
    0x2020, //  5: wait   0 pin, 0
            //     .wrap_target
    0x4101, //  6: in     pins, 1                [1]
            //     .wrap
};

#if !PICO_NO_HARDWARE
static const struct pio_program serial_rd_norm_program = {
    .instructions = serial_rd_norm_program_instructions,
    .length = 7,
    .origin = -1,
    .pio_version = serial_rd_norm_pio_version,
#if PICO_PIO_VERSION > 0
    .used_gpio_ranges = 0x0
#endif
};

static inline pio_sm_config serial_rd_norm_program_get_default_config(uint offset) {
    pio_sm_config c = pio_get_default_sm_config();
    sm_config_set_wrap(&c, offset + serial_rd_norm_wrap_target, offset + serial_rd_norm_wrap);
    sm_config_set_in_pin_count(&c, 32);
    sm_config_set_in_shift(&c, 1, 1, 32);
    sm_config_set_fifo_join(&c, PIO_FIFO_JOIN_RX);
    return c;
}
#endif

// ------------- //
// serial_rd_inv //
// ------------- //

#define serial_rd_inv_wrap_target 5
#define serial_rd_inv_wrap 5
#define serial_rd_inv_pio_version 1

#define serial_rd_inv_offset_start 0u

static const uint16_t serial_rd_inv_program_instructions[] = {
    0xe028, //  0: set    x, 8
    0x2020, //  1: wait   0 pin, 0
    0x00c0, //  2: jmp    pin, 0
    0x0042, //  3: jmp    x--, 2
    0x20a0, //  4: wait   1 pin, 0
            //     .wrap_target
    0x4101, //  5: in     pins, 1                [1]
            //     .wrap
};

#if !PICO_NO_HARDWARE
static const struct pio_program serial_rd_inv_program = {
    .instructions = serial_rd_inv_program_instructions,
    .length = 6,
    .origin = -1,
    .pio_version = serial_rd_inv_pio_version,
#if PICO_PIO_VERSION > 0
    .used_gpio_ranges = 0x0
#endif
};

static inline pio_sm_config serial_rd_inv_program_get_default_config(uint offset) {
    pio_sm_config c = pio_get_default_sm_config();
    sm_config_set_wrap(&c, offset + serial_rd_inv_wrap_target, offset + serial_rd_inv_wrap);
    sm_config_set_in_pin_count(&c, 32);
    sm_config_set_in_shift(&c, 1, 1, 32);
    sm_config_set_fifo_join(&c, PIO_FIFO_JOIN_RX);
    return c;
}
#endif

